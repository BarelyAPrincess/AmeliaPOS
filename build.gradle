import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'checkstyle'
apply plugin: 'application'
apply from: project.file( 'etc/publish.gradle' )

defaultTasks 'clean', 'build'

buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}

	dependencies {
		classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
		classpath 'ch.raffael.pegdown-doclet:pegdown-doclet:1.3'
	}
}

allprojects {
	repositories {
		jcenter()
		mavenCentral()
	}

	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'license'
	apply plugin: 'checkstyle'

	defaultTasks 'clean', 'build'

	compileJava {options.encoding = 'UTF-8'}

	javadoc {options.encoding = "UTF-8"}

	// compileGroovy {options.encoding = "UTF-8"}

	license {
		header rootProject.file( 'etc/HEADER' )
		ignoreFailures true
		strictCheck true
		mapping 'yaml', 'SCRIPT_STYLE'
		mapping 'yml', 'SCRIPT_STYLE'
		excludes( ['**/*.archive',
		           '**/*.md5',
		           '**/*.txt',
		           '**/*.bmp',
		           '**/*.png',
		           '**/*.jpg',
		           '**/*.yaml',
		           '**/*.yml',
		           '**/*.properties'] )
		ext.year = Calendar.getInstance().get( Calendar.YEAR )
		ext.name = 'Miss Amelia Sara (Millie)'
		ext.email = 'me@missameliasara.com'
	}

	checkstyle {
		configFile = rootProject.file( 'etc/checkstyle.xml' )
		configProperties = ["basedir": project.projectDir]
	}

	configurations {
		required
	}

	dependencies {
		configurations.compile.extendsFrom( configurations.required )
	}

	task dependenyBundler {
		doFirst {
			def depend = configurations.required.collect {it.isDirectory() ? it : zipTree( it )}
			if ( depend.size > 0 )
			{
				println 'Bundled required libs into jar: ' + depend
				rootProject.jar.from( depend )
			}
		}
	}

	jar.dependsOn dependenyBundler
}

def rootDir = rootProject.rootDir

subprojects {
	buildDir = new File( rootDir, '/build/' )
	libsDirName = new File( rootDir, '/build/dist/' )
	artifacts {archives jar}
}

// Tells Gradle to include the sourceSets from all subprojects into the main
sourceSets {
	main {
		java {
			rootProject.getSubprojects().each {
				it.sourceSets.main.java.srcDirs.each {
					srcDir it
				}
			}
		}
	}
}

dependencies {
	testCompile( group: 'junit', name: 'junit', version: '4.12' ) {
		exclude group: 'org.hamcrest'
	}
	testCompile 'org.hamcrest:hamcrest-library:1.3'

	compile project( ':AmeliaCommonLib' )
	compile project( ':AmeliaAppLib' )
	compile project( ':AmeliaLogLib' )
	compile project( ':AmeliaNetworkingLib' )

	/*compile project( ':AmeliaScriptingLib' )
	compile project( ':AmeliaStorageLib' )
	compile project( ':AmeliaPluginsLib' )
	compile project( ':AmeliaLogLib' )
	compile project( ':AmeliaUsersLib' )*/

	compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '4.7'

	compile group: 'io.netty', name: 'netty-all', version: '4.1.39.Final'

	// required fileTree( include: ['*.jar'], dir: '/opt/EpsonJavaPOS/lib' )
	required fileTree( include: ['*.jar'], dir: 'libs' )
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

Properties buildProperties = getBuildProperties();

mainClassName = "io.amelia.pos.drawer.Step2Main"
def rawVersion = buildProperties.getProperty( "versionMajor" ) + "." + buildProperties.getProperty( "versionMinor" ) + "." + buildProperties.getProperty( "versionRevision" )
def jenkins_build = System.getenv( "BUILD_NUMBER" )
def travis_build = System.getenv( "TRAVIS_BUILD_NUMBER" )
def buildNumber = '0'

group 'io.amelia.pos'
description = ''

distsDirName = 'dist'
libsDirName = 'dist'

if ( System.getenv( "RELEASE" ) != null )
{
	version = buildProperties.getProperty( "versionMajor" ) + "." + buildProperties.getProperty( "versionMinor" ) + "." + buildProperties.getProperty( "versionRevision" ) + "-" + System.getenv( "RELEASE" )
}
else if ( jenkins_build != null )
{
	version = rawVersion + '-jenkins+B' + jenkins_build
	buildNumber = jenkins_build
}
else if ( travis_build != null )
{
	version = rawVersion + '-travis+B' + travis_build
	buildNumber = travis_build
}
else
{
	version = rawVersion + '-git+H' + gitDescribe()
}

def gitDescribe()
{
	try
	{
		def stdout = new ByteArrayOutputStream()
		exec {
			commandLine 'git', 'rev-parse', '--short', 'HEAD'
			standardOutput = stdout
		}
		return stdout.toString().trim()
	}
	catch ( Throwable e )
	{
		return "unknown"
	}
}

def getBuildProperties()
{
	try
	{
		Properties props = new Properties()
		props.load( new FileInputStream( new File( "./src/main/resources/build.properties" ) ) )
		return props
	}
	catch ( Throwable e )
	{
		return 0
	}
}

eclipse {
	project {name = buildProperties.getProperty( "gitRepo", "AmeliaPOS" )}
}

jar {
	manifest {
		attributes 'Implementation-Title': buildProperties.getProperty( "productName", 'Amelia POS' )
		attributes 'Implementation-Version': version
		attributes 'Implementation-Vendor': buildProperties.getProperty( "devName", 'Miss Amelia Sara (Millie)' )
		attributes 'Implementation-Vendor-Id': buildProperties.getProperty( "devEmail", 'me@missameliasara.com' )
		attributes 'Main-Class': mainClassName
	}

	/*rootProject.getAllprojects().each {
		try
		{
			println it.configurations.bundleJar

			def depend = it.configurations.bundleJar.collect {it}
			println 'Bundled dependency "' + depend + '" into jar file.'
			from depend
		}
		catch ( MissingPropertyException e )
		{
			e.printStackTrace()
			println 'No jar dependencies for project: ' + it.getName()
			// Ignore Exception thrown when configuration is missing.
		}
	}*/
}

task sourcesArchive( type: Zip ) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocArchive( type: Zip, dependsOn: 'javadoc' ) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

/**
 * Writes the project dependencies to a resource file for dependency injection within the application*/
task writeDependenciesFile {
	doFirst {
		def allDependencies = []
		rootProject.getAllprojects().each {
			allDependencies += it.getConfigurations().getByName( "runtime" ).getAllDependencies().withType( ExternalModuleDependency )

			// Remove all dependencies that were already bundled into the jar file
			allDependencies.removeAll( it.getConfigurations().getByName( "required" ).getAllDependencies().withType( ExternalModuleDependency ) )
		}

		def output = ""
		allDependencies.unique().each {
			output += it.group + ":" + it.name + ":" + it.version + "\n"
		}

		def file = file( "src/main/resources/dependencies.txt" )
		file.parentFile.mkdirs()
		def fos = new FileOutputStream( file )
		fos.write( ( byte[] ) output.getBytes() )
		fos.close()
	}
}

task writePropertiesFile {
	doFirst {
		SimpleDateFormat sdf = new SimpleDateFormat( "EEE, d MMM yyyy HH:mm:ss Z" )

		Properties props = new Properties()
		props.load( new FileInputStream( file( "src/main/resources/build.properties" ) ) )
		props.setProperty( "project.builtOn", sdf.format( new Date() ) )
		props.setProperty( "project.build", buildNumber )
		props.setProperty( "project.version", version.toString() )

		File f2 = file( "build/dist/build.properties" )
		File f3 = file( "build/resources/main/build.properties" )
		f2.parentFile.mkdirs()
		f3.parentFile.mkdirs()
		OutputStream out2 = new FileOutputStream( f2 )
		OutputStream out3 = new FileOutputStream( f3 )
		props.store( out2, "Build Properties File" )
		props.store( out3, "Build Properties File" )
	}
}

build.dependsOn writeDependenciesFile
jar.dependsOn writePropertiesFile

artifacts {archives jar, sourcesArchive, javadocArchive}
